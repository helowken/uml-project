@startuml
start
note left: ReplicaFetcherThread.run
:func: maybeTruncate;

:build fetchRequest for partitionFetchStates and delay partitionsWithError;

:wait for a time if fetchRequest has no valid partitionDatas
(partitionData comes from partitionFetchState);

if (fetchRequest has valid partitionDatas?) then(yes)
	:fetch response for fetchRequest;
	:wait for a time if error occurs during fetching;

	while (has more (topicPartition, partitionData) in response?)
		:get currentState for topicPartition from partitionFetchStates;
		if (topicPartition's fetchOffset in fetchRequest == currentState's fetchOffset?) then(yes)
			if (partitionData has no error?) then(yes)
				:get records from partitionData;

				:calculate newOffset
				1. nextOffset of records' last batch if records are not empty
				2. or currentState's fetchOffset (fetch again);

				partition processPartitionData {
					:get replica, partition for topicPartition;
					if (currentState's fetchOffset != replica.logEndOffset.messageOffset?) then(yes)
						#Red:Error for offset mismatch;
					else(no)
						:append records to partition follower (func: Partition:appendRecordsToFollower);
					endif
					:calculate followerHighWatermark
					min(replica's logEndOffset, partitionData's highWatermark);

					:update replica's highWatermark to followerHighWatermark;
					:get leaderLogStartOffset from partitionData;
					if (leaderLogStartOffset > followerHighWatermark?) then(yes)
						#Red:Error for offset out of range;
					else(no)
						if (leaderLogStartOffset > replica's logStartOffset?) then(yes)
							:update	replica's logStartOffset;
							:clear leaderEpochs which offset < leaderLogStartOffset and do flush;
							:truncate producerStates and delete snapshots which before leaderLogStartOffset;
							:update first unstable offset;
						endif
					endif
				}
				:update partitionFetchState' fetchOffset to newOffset;
				:add topicPartition to partitionsWithError if error occurs;
			elseif (partitionData has OFFSET_OUT_OF_RANGE error?) then(yes)
				:calculate newOffset by (func: handleOffsetOutOfRange);
				:update partitionFetchState' fetchOffset to newOffset;
				:add topicPartition to partitionsWithError if error occurs;
			else(no)
				:add topicPartition to partitionsWithError;
			endif
		endif
	end while
	:delay partitionsWithError;
endif
stop
@enduml
