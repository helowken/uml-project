@startuml
start
note left: handle leaderAndIsrRequest
if (authorize pass?) then(yes)
	if (request.controllerEpoch < currentControllerEpoch?) then(yes)
		#Red:return error result 
		STALE_CONTROLLER_EPOCH;
	else(no)
		:update currentControllerEpoch;
		:get partitionStates from request;
		while (has more partitionStates?)
			:get or create a partition for partitionState;
			
			if (partition is offline?) then(yes)
				:mark topicPartition 
				as KAFKA_STORAGE_ERROR error;
			elseif (partition.leaderEpoch < partitionState.leaderEpoch?) then(yes)
				if (partitionState.replicas contains localBrokerId?) then(yes)
					:collect partition and partitionState pair;
				else(no)
					:mark topicPartition 
					as UNKNOWN_TOPIC_OR_PARTITION error;
				endif
			else(no)
				:makr topicPartition 
				as STALE_CONTROLLER_EPOCH error;
			endif
		end while

		:filter partitionsToBeLeader from collected partitionAndState pairs 
		which leader == localBrokerId;

		:filter partitionsToBeFollower from collected partitionAndState pairs 
		which leader != localBrokerId;

		:try to make partitionsToBeLeader to be leaders;
		:try to make partitionsToBeFollower to be followers;

		while (has more partition in collected partitionAndState pairs?) 
			if (partition doesn't contain local replica \n&& partition is not offline?) then(yes)
				:set partition as an OfflinePartition;
			endif
		end while

		if (it's the first time to handle request?) then(yes)
			partition schedulePeriodically {
				:filter out onlinePartitionsWithLocalReplica;
				:write their (topicPartition -> highWatermark's messageOffset) 
				pairs to checkpoint files;
			}
		endif

		:shutdown idle fetcher threads;
	
		partition onLeadershipChange {
			while (has more partitionsOfUpdatedLeaders?)
				if (partition.topic == GROUP_METADATA_TOPIC_NAME?) then(yes)
					:handle group immigration;
				elseif (partition.topic == TRANSACTION_STATE_TOPIC_NAME?) then(yes)
					:handle transaction immigration;
				endif
			end while

			while (has more partitionsOfUpdatedFollowers?)
				if (partition.topic == GROUP_METADATA_TOPIC_NAME?) then(yes)
					:handle group immigration;
				elseif (partition.topic == TRANSACTION_STATE_TOPIC_NAME?) then(yes)
					:handle transaction immigration;
				endif
			end while
		}

		:return normal result;
	endif

	:send leaderAndIsr response;
else(no)
	#Red:send CLUSTER_AUTHORIZATION_FAILED 
	error response;
endif
stop
@enduml
